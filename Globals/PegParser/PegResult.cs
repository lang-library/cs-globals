//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class PegResult : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal PegResult(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PegResult obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PegResult() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          PegParserDLLPINVOKE.delete_PegResult(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public bool error {
    set {
      PegParserDLLPINVOKE.PegResult_error_set(swigCPtr, value);
      if (PegParserDLLPINVOKE.SWIGPendingException.Pending) throw PegParserDLLPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = PegParserDLLPINVOKE.PegResult_error_get(swigCPtr);
      if (PegParserDLLPINVOKE.SWIGPendingException.Pending) throw PegParserDLLPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string error_msg {
    set {
      PegParserDLLPINVOKE.PegResult_error_msg_set(swigCPtr, value);
      if (PegParserDLLPINVOKE.SWIGPendingException.Pending) throw PegParserDLLPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = PegParserDLLPINVOKE.PegResult_error_msg_get(swigCPtr);
      if (PegParserDLLPINVOKE.SWIGPendingException.Pending) throw PegParserDLLPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public PegAST ast {
    set {
      PegParserDLLPINVOKE.PegResult_ast_set(swigCPtr, PegAST.getCPtr(value));
      if (PegParserDLLPINVOKE.SWIGPendingException.Pending) throw PegParserDLLPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = PegParserDLLPINVOKE.PegResult_ast_get(swigCPtr);
      PegAST ret = (cPtr == global::System.IntPtr.Zero) ? null : new PegAST(cPtr, true);
      if (PegParserDLLPINVOKE.SWIGPendingException.Pending) throw PegParserDLLPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public PegResult() : this(PegParserDLLPINVOKE.new_PegResult(), true) {
  }

}
